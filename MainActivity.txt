`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    22:38:56 03/18/2017 
// Design Name: 
// Module Name:    FPGA_IMPLEMENTATION 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module FPGA_IMPLEMENTATION(input clk);
		 parameter WIDTH = 120; // Image width 
		 parameter HEIGHT = 90; // Image height
		 START_UP_DELAY = 100, //Delay during start up time 
                 HSYNC_DELAY = 160, // Delay between  
		 
		 assign INFILE = "C:\Users\TEMP.DELL.001\Desktop\tushar.hex";  //image read
		 wire reg[7:0] r[119:0][89:0];
		 input reg[7:0] a[119:0][89:0];
		 initial begin 										//Correction Required 
			$readmemh(INFILE, reg [7:0] a[119:0][89:0]);	// image store in the input register
		 end
		 
		 for(i=0;i<90;i=i+1)
		 begin
			for(j=0;j<8;j=j+1)
			begin
				reg[j]r[0][i]=reg[j]a[0][i];     //residual image stored for the first column of the frame
			end
		 end
		 
		 
		 assign c=8'h0;
		 for(i=1;i<89;i=i+1)						//residual pixals for all the rows and column except first column of the frame.
		  begin
		  for(j=1;j<119;j=j+1)
		  begin
			for(k=0;k<8;k=k+1)
				begin
					reg[k]r[i][j]=reg[k]a[i][j]xor reg[k]a[i][j]xor c
					c=~reg[k]a[i][j]*reg[k]a[i][j-1]+~reg[k]a[i][j]*c+reg[k]a[i][j-1]*c+~reg[k]a[i][j]*c
				end
			end
		 end	
		 
		wire reg[7:0] output_1[119:0][89:0];
		wire reg[7:0] qx[119:0][89:0];
		 
		for(i=0;i<120;i=i+1)
		begin
			for(j=0;j<90;j=j+1)
			begin
				for(k=0;k<8;k=k+1)
				begin
					always@(reg[k] output_1[i][j] or clk)
					begin
						if(clk)
							reg[k] output_1[i][j] <= reg[k]qx[i][j];
					end
				end
			end
		 end

			wire reg[7:0] output_2[119:0][89:0];
			for(i=0;i<120;i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
						assign reg[k] output_2[i][j]=reg[k]output_1[j][i] xor reg[k]qx[j][i];
					end
				end
			end
			
			wire reg[7:0] mux_input0[119:0][89:0];
			wire reg[7:0] mux_input1[119:0][89:0];
			wire reg[7:0] output_3[119:0][89:0];
			wire reg[1:0] mux_input;
			for(i=0;i<120;i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
					assign constant = 8'h1.125;
					assign reg[k] mux_input1[i][j] = constant*reg[k] mux_output_4[i][j];
					assign reg[1] mux_input = reg[k] mux_input2[i][j];
					assign reg[0] mux_input = reg[k] mux_input1[i][j];
					assign reg[k] output_3[i][j] = reg[reg [k] output_2[i][j]] mux_input;
					end
				end
			end
			wire reg[7:0] mux_output_4[119:0][89:0];
			wire reg[7:0] mux_output_5[119:0][89:0]; 
			
			always @(posedge clk)
			for(i=0;i<120;i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
					assign reg[k] mux_output_4[i][j] = reg [k] output_3[i][j];
					
					end
				end
			end
			
			for(i=0;i<120;i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
					assign reg[k] mux_output_5[i][j] = ~reg[7:0] mux_output_4[119:0][89:0];
					assign reg[k] mux_input2[i][j] = reg[k] mux_output_4[i][j];
					end
				end
			end
			wire reg[7:0] output_6[120:0][90:0];
			for(i=0;i<120;i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
					assign reg[1] mux_input = reg[k] mux_output_5[i][j];
					assign reg[0] mux_input = reg[k] mux_output_4[i][j];
					assign reg[k] output_3[i][j] = reg[reg [k] output_1[i][j]] mux_input;
					end
				end
			end
			
			wire reg[7:0] output_alu[119:0][89:0];
			wire reg[7:0] input_comp_0[119:0][89:0];
			wire reg[7:0] alu_clock[119:0][89:0];
			
			for(i=0;i<120; i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
						always @(posedge alu_clock)
							assign reg[k] output_alu[i][j] = reg[k] output_5[i][j] + reg[k] input_comp_0[i][j];
					end
				end		
			end
			
			
			always @(posedge clk)
			for(i=0;i<120;i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
					assign reg[k] output_alu[i][j] = reg [k] input_comp_0[i][j];
					end
				end
			end
			
			for(i=0;i<120; i=i+1)
			begin
				for(j=0;j<90;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin 
						if(reg[k] input_comp_0[i][j] > reg[k] r[i][j])
							assign reg[k] output_1[i][j] = reg[k] r[i][j];
						else
							assign reg[k] output_1[i][j] = reg[k] input_comp_0[i][j];
					end
				end
			end
			
			output reg[7:0] output_final[119:0][89:0];
			
			for(j=0;j<90;j=j+1)
			begin
				for(k=0;k<8;k=k+1)
				begin
					assign reg[k] output_final[0][j] = reg[k] output_1[0][j];
				end
			end
			
			for(i=0;i<90;i=i+1)
			begin
				for(j=1;j<120;j=j+1)
				begin
					for(k=0;k<8;k=k+1)
					begin
						assign reg[k] output_final[i][j] = reg[k] output_1[i][j] + reg[k] output_1[i-1][j];
					end
				end
			end
		
			
			
			
		endmodule
		 



